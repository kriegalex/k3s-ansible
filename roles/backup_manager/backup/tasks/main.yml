---
# Add to beginning of each role
- name: Verify prerequisites
  block:
    - name: Check MinIO accessibility
      ansible.builtin.uri:
        url: "{{ minio_endpoint }}/v1/AUTH_backup/nextcloud-backup"
        validate_certs: false
        status_code:
          - 401  # instead of 200 because of special QNAP S3 bucket
      register: minio_health

    - name: Verify kubectl access
      ansible.builtin.command: kubectl get nodes
      changed_when: false

- name: Verify PVCs exist
  kubernetes.core.k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ k8up_default_namespace }}"
  register: existing_pvcs
  failed_when: >
    backup_nextcloud_config_pvc not in (existing_pvcs.resources | map(attribute='metadata.name') | list) or
    backup_postgresql_data_pvc not in (existing_pvcs.resources | map(attribute='metadata.name') | list)

# - name: Debug PVCs
#   ansible.builtin.debug:
#     msg: "{{ existing_pvcs }}"

# - name: Debug PVCs
#   ansible.builtin.debug:
#     msg: "{{ (existing_pvcs.resources | map(attribute='metadata.name')) }}"

# - name: Debug PVCs
#   ansible.builtin.debug:
#     msg: "{{ (existing_pvcs.resources | map(attribute='metadata.name') | list) }}"

- name: Scale down Nextcloud deployment
  kubernetes.core.k8s_scale:
    api_version: apps/v1
    kind: Deployment
    name: "{{ k8up_nextcloud_release }}"
    namespace: "{{ k8up_default_namespace }}"
    replicas: 0
    wait: true
    wait_timeout: 300

# - name: Debug
#   ansible.builtin.debug:
#     msg: "{{ (existing_pvcs.resources | map(attribute='metadata.name') | list) }}"

- name: Add backup annotations false to all PVCs
  kubernetes.core.k8s:
    state: patched
    kind: PersistentVolumeClaim
    name: "{{ item }}"
    namespace: "{{ k8up_default_namespace }}"
    definition:
      metadata:
        annotations:
          "k8up.io/backup": "false"
  loop: "{{ (existing_pvcs.resources | map(attribute='metadata.name') | list) }}"

- name: Add backup annotations to PVCs
  kubernetes.core.k8s:
    state: patched
    kind: PersistentVolumeClaim
    name: "{{ item }}"
    namespace: "{{ k8up_default_namespace }}"
    definition:
      metadata:
        annotations:
          "k8up.io/backup": "true"
  loop:
    - "{{ backup_nextcloud_config_pvc }}"
    - "{{ backup_postgresql_data_pvc }}"

- name: Create S3 credentials secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: minio-credentials
        namespace: "{{ k8up_default_namespace }}"
      type: Opaque
      stringData:
        username: "{{ minio_access_key }}"
        password: "{{ minio_secret_key }}"

- name: Create repository encryption secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: backup-repo
        namespace: "{{ k8up_default_namespace }}"
      type: Opaque
      stringData:
        password: "{{ minio_repository_password }}"

- name: Create Backup
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: k8up.io/v1
      kind: Backup
      metadata:
        name: "{{ backup_name }}"
        namespace: "{{ k8up_default_namespace }}"
      spec:
        failedJobsHistoryLimit: 2
        successfulJobsHistoryLimit: 2
        backend:
          repoPasswordSecretRef:
            name: backup-repo
            key: password
          s3:
            endpoint: "{{ minio_endpoint }}"
            bucket: "{{ minio_bucket }}"
            accessKeyIDSecretRef:
              name: minio-credentials
              key: username
            secretAccessKeySecretRef:
              name: minio-credentials
              key: password
        tags:
          - nextcloud-migration

- name: Wait for backup completion
  kubernetes.core.k8s_info:
    api_version: k8up.io/v1
    kind: Backup
    name: "{{ backup_name }}"
    namespace: "{{ k8up_default_namespace }}"
  register: backup_status
  until:
    - backup_status.resources[0].status is defined
    - backup_status.resources[0].status.started is defined
    - backup_status.resources[0].status.finished is defined
  retries: 60
  delay: 30

- name: Verify backup success
  ansible.builtin.fail:
    msg: "Backup failed: {{ backup_status.resources[0].status.failed }}"
  when: backup_status.resources[0].status.failed is defined

- name: Add backup annotations to PVCs
  kubernetes.core.k8s:
    state: patched
    kind: PersistentVolumeClaim
    name: "{{ item }}"
    namespace: "{{ k8up_default_namespace }}"
    definition:
      metadata:
        annotations:
          "k8up.io/backup": "false"
  loop:
    - "{{ backup_nextcloud_config_pvc }}"
    - "{{ backup_postgresql_data_pvc }}"

- name: Scale up Nextcloud deployment
  kubernetes.core.k8s_scale:
    api_version: apps/v1
    kind: Deployment
    name: "{{ k8up_nextcloud_release }}"
    namespace: "{{ k8up_default_namespace }}"
    replicas: 1
    wait: true
    wait_timeout: 300

- name: Remove an existing Service object
  kubernetes.core.k8s:
    state: absent
    api_version: k8up.io/v1
    kind: Backup
    name: "{{ backup_name }}"
    namespace: "{{ k8up_default_namespace }}"
