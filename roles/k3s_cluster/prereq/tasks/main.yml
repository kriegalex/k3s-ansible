---
- name: Set same timezone on every Server
  community.general.timezone:
    name: "{{ system_timezone }}"
  when: (system_timezone is defined) and (system_timezone != "Your/Timezone")

- name: Set SELinux to disabled state
  ansible.posix.selinux:
    state: disabled
  when: ansible_os_family == "RedHat"

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true
  tags: sysctl

- name: Enable IPv6 router advertisements
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.accept_ra
    value: "2"
    state: present
    reload: true
  tags: sysctl

- name: Add br_netfilter to /etc/modules-load.d/
  ansible.builtin.copy:
    content: br_netfilter
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: u=rw,g=,o=
  when: ansible_os_family == "RedHat"

- name: Load br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  when: ansible_os_family == "RedHat"

- name: Set bridge-nf-call-iptables (just to be sure)
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: true
  when: ansible_os_family == "RedHat"
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
  tags: sysctl

- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: Defaults    secure_path = {{ secure_path[ansible_os_family] }}
    regexp: Defaults(\s)*secure_path(\s)*=
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: visudo -cf %s
  when: ansible_os_family in [ "RedHat", "Suse" ]

- name: Disable and remove multipathd
  block:
    - name: Get initial multipathd service status
      ansible.builtin.command: systemctl status multipathd
      register: multipathd_status
      failed_when: false
      changed_when: false

    - name: Stop multipathd socket
      ansible.builtin.systemd:
        name: multipathd.socket
        state: stopped
        enabled: false
      when: multipathd_status.rc == 0

    - name: Stop and disable multipathd service
      ansible.builtin.systemd:
        name: multipathd
        state: stopped
        enabled: false
        daemon_reload: true
      when: multipathd_status.rc == 0

    - name: Remove multipath-tools package
      ansible.builtin.apt:
        name: multipath-tools
        state: absent
        purge: true
        autoremove: true
      register: package_removed

    - name: Verify service is completely removed
      ansible.builtin.command: systemctl status multipathd
      register: final_check
      failed_when: false
      changed_when: false

    - name: Report status
      ansible.builtin.debug:
        msg: |
          Initial status: {{ (multipathd_status.rc == 0) | ternary('Service was running', 'Service was not running') }}
          Package removal: {{ package_removed.changed | ternary('Package was removed', 'Package was already removed') }}
          Final status: {{ (final_check.rc != 0) | ternary('Service is now completely removed', 'Service might still be present - manual check required') }}
