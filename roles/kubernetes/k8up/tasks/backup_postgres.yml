# tasks/backup-postgres.yml
---
- name: Get active PostgreSQL pod name
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    label_selectors:
      - "statefulset.kubernetes.io/pod-name={{ item.statefulset_name }}-0"
  register: postgres_pod_info

- name: Fail if PostgreSQL pod not found
  ansible.builtin.fail:
    msg: "PostgreSQL pod not found for statefulset {{ item.statefulset_name }}"
  when: postgres_pod_info.resources | length == 0

- name: Set active pod name
  ansible.builtin.set_fact:
    active_pod: "{{ postgres_pod_info.resources[0].metadata.name }}"

- name: Check if dump file exists in pod
  kubernetes.core.k8s_exec:
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    pod: "{{ active_pod }}"
    command: "ls -l /dump/backup.sql"
  register: dump_check
  ignore_errors: true

- name: Fail if dump file not found
  ansible.builtin.fail:
    msg: "SQL dump file not found in pod {{ active_pod }}"
  when: dump_check.rc != 0

- name: Create backup PVC
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ item.statefulset_name }}-backup-pvc"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ backup_pvc_size }}"
        storageClassName: "{{ storage_class }}"

- name: Create temporary pod to copy dump
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Pod
      metadata:
        name: "backup-copy-{{ item.statefulset_name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
      spec:
        containers:
          - name: copy-container
            image: busybox
            command: ['sleep', '3600']
            volumeMounts:
              - name: backup-volume
                mountPath: /backup
        volumes:
          - name: backup-volume
            persistentVolumeClaim:
              claimName: "{{ item.statefulset_name }}-backup-pvc"

- name: Wait for copy pod to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    name: "backup-copy-{{ item.statefulset_name }}"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
  register: copy_pod

- name: Copy dump file to PVC
  kubernetes.core.k8s_exec:
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    pod: "{{ active_pod }}"
    command: "cp /dump/backup.sql /backup/"
    volume_mounts:
      - name: backup-volume
        mount_path: /backup
        claim_name: "{{ item.statefulset_name }}-backup-pvc"

- name: Create K8up backup
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: k8up.io/v1
      kind: Backup
      metadata:
        name: "{{ item.statefulset_name }}-backup-{{ ansible_date_time.epoch }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
      spec:
        failedJobsHistoryLimit: 2
        successfulJobsHistoryLimit: 2
        backend:
          repoPasswordSecretRef:
            name: backup-repo
            key: password
          s3:
            endpoint: "{{ minio_endpoint }}"
            bucket: "{{ item.minio_bucket | default('backup') }}"
            accessKeyIDSecretRef:
              name: minio-credentials
              key: username
            secretAccessKeySecretRef:
              name: minio-credentials
              key: password
        tags: "{{ item.tags | default(backup_tags) }}"

- name: Wait for backup to complete
  kubernetes.core.k8s_info:
    api_version: k8up.io/v1
    kind: Backup
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    name: "{{ item.statefulset_name }}-backup-{{ ansible_date_time.epoch }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
  register: backup_status
  until: backup_status.resources[0].status.started is defined and backup_status.resources[0].status.finished is defined
  retries: 30
  delay: 30

- name: Check backup status
  ansible.builtin.fail:
    msg: "Backup failed for {{ item.statefulset_name }}"
  when: backup_status.resources[0].status.failed is defined and backup_status.resources[0].status.failed

- name: Cleanup temporary copy pod
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    name: "backup-copy-{{ item.statefulset_name }}"
