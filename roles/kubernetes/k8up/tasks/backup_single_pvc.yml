---
- name: Process single PVC backup
  block:
    - name: Verify PVCs exist
      kubernetes.core.k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
      register: existing_pvcs
      failed_when: >
        item.name not in (existing_pvcs.resources | map(attribute='metadata.name') | list)

    - name: Scale down related deployments
      kubernetes.core.k8s_scale:
        api_version: apps/v1
        kind: "{{ item.workload_type | default(k8up_workload_default_type) }}"
        name: "{{ item.workload_name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
        replicas: 0
        wait: true
        wait_timeout: "{{ k8up_wait_timeout }}"
      when: item.workload_name is defined

    # #
    # # REQUIRES BACKUP_SKIP_WITHOUT_ANNOTATION=true in k8up operator env vars
    # #
    # - name: Add backup annotations false to all PVCs in namespace
    #   kubernetes.core.k8s:
    #     state: patched
    #     kind: PersistentVolumeClaim
    #     name: "{{ pvc_item.metadata.name }}"
    #     namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
    #     definition:
    #       metadata:
    #         annotations:
    #           "k8up.io/backup": "false"
    #   when: item.namespace != k8up_default_namespace
    #   loop: "{{ existing_pvcs.resources }}"
    #   loop_control:
    #     loop_var: pvc_item
    #     label: "{{ pvc_item.metadata.name }}"

    - name: Add backup annotations to target PVC
      kubernetes.core.k8s:
        state: patched
        kind: PersistentVolumeClaim
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              "k8up.io/backup": "true"

    - name: Create Backup
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: k8up.io/v1
          kind: Backup
          metadata:
            name: "backup-{{ item.name }}"
            namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
          spec:
            failedJobsHistoryLimit: "{{ backup_failed_jobs_history_limit }}"
            successfulJobsHistoryLimit: "{{ backup_successful_jobs_history_limit }}"
            backend:
              repoPasswordSecretRef:
                name: backup-repo
                key: password
              s3:
                endpoint: "{{ minio_endpoint }}"
                bucket: "{{ item.minio_bucket | default('backup') }}"
                accessKeyIDSecretRef:
                  name: minio-credentials
                  key: username
                secretAccessKeySecretRef:
                  name: minio-credentials
                  key: password
            tags: "{{ item.tags | default(backup_tags) }}"

    - name: Wait for backup completion
      kubernetes.core.k8s_info:
        api_version: k8up.io/v1
        kind: Backup
        name: "backup-{{ item.name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
      register: backup_status
      until:
        - backup_status.resources[0].status is defined
        - backup_status.resources[0].status.started is defined
        - backup_status.resources[0].status.finished is defined
      retries: 60
      delay: 30

    - name: Verify backup success
      ansible.builtin.fail:
        msg: "Backup failed: {{ backup_status.resources[0].status.failed }}"
      when: backup_status.resources[0].status.failed is defined

    - name: Remove backup annotation from PVC
      kubernetes.core.k8s:
        state: patched
        kind: PersistentVolumeClaim
        name: "{{ item.name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              "k8up.io/backup": "false"

    - name: Remove Backup object
      kubernetes.core.k8s:
        state: absent
        api_version: k8up.io/v1
        kind: Backup
        name: "backup-{{ item.name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"

  always:
    - name: Scale up related deployments
      kubernetes.core.k8s_scale:
        api_version: apps/v1
        kind: "{{ item.workload_type | default(k8up_workload_default_type) }}"
        name: "{{ item.workload_name }}"
        namespace: "{{ item.namespace | default(k8up_default_namespace) }}"
        replicas: "{{ item.workload_replicas | default(k8up_workload_default_replicas) }}"
        wait: true
        wait_timeout: "{{ k8up_wait_timeout }}"
      when: item.workload_name is defined
