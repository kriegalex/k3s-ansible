# roles/k8up/tasks/process_backup.yml
---
- name: Perform backup
  block:
    # #
    # # To use this, you need to improve the PodConfig below.
    # # Otherwise, tolerations or nodeSelectors are not applied correctly by k8up to its backup pod.
    # #
    # - name: Scale down Deployment
    #   kubernetes.core.k8s_scale:
    #     api_version: apps/v1
    #     kind: Deployment
    #     name: "{{ backup_item.deployment_name }}"
    #     namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
    #     replicas: 0
    #     wait: true
    #     wait_timeout: "{{ k8up_wait_timeout }}"
    #   when: backup_item.deployment_name is defined # and backup_item.psql_pod is defined

    # - name: Scale down StatefulSet
    #   kubernetes.core.k8s_scale:
    #     api_version: apps/v1
    #     kind: StatefulSet
    #     name: "{{ backup_item.statefulset_name }}"
    #     namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
    #     replicas: 0
    #     wait: true
    #     wait_timeout: "{{ k8up_wait_timeout }}"
    #   when: backup_item.statefulset_name is defined # and backup_item.psql_pod is defined

    - name: Add backup annotation to PVC
      when: backup_item.pvc_name is defined
      kubernetes.core.k8s:
        state: patched
        kind: PersistentVolumeClaim
        name: "{{ backup_item.pvc_name }}"
        namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              "k8up.io/backup": "true"

    - name: Add backup annotation to PostgreSQL Pod
      when: backup_item.psql_pod is defined
      kubernetes.core.k8s:
        state: patched
        kind: Pod
        name: "{{ backup_item.psql_pod }}"
        namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              k8up.io/backupcommand: sh -c 'PGDATABASE="$POSTGRES_DATABASE" PGUSER="$POSTGRES_USER" PGPASSWORD="$POSTGRES_PASSWORD" pg_dump --clean'
              k8up.io/file-extension: "-{{ backup_item.name }}.sql"

    # #
    # # Improvement: report the nodeSelector and tolerations from the backup_item.name main pod
    # #
    # - name: Create PodConfig for backup
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: k8up.io/v1
    #       kind: PodConfig
    #       metadata:
    #         name: "podconfig-{{ backup_item.name }}"
    #         namespace: "{{ k8up_default_namespace }}"
    #       spec:
    #         template:
    #           spec:
    #             containers:
    #               - name: "backup-{{ backup_item.name }}"
    #             tolerations:
    #               - key: "dedicated"
    #                 operator: "Equal"
    #                 value: "media-server"
    #                 effect: "NoSchedule"

    - name: Create Backup object
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: k8up.io/v1
          kind: Backup
          metadata:
            name: "{{ backup_item.name }}"
            namespace: "{{ k8up_default_namespace }}"
          spec:
            # podConfigRef:
            #   name: "podconfig-{{ backup_item.name }}"
            podSecurityContext:
              runAsUser: "{{ backup_item.run_as_user | default(omit) | int }}"
            failedJobsHistoryLimit: "{{ backup_failed_jobs_history_limit }}"
            successfulJobsHistoryLimit: "{{ backup_successful_jobs_history_limit }}"
            backend:
              repoPasswordSecretRef:
                name: backup-repo
                key: password
              s3:
                endpoint: "{{ minio_endpoint }}"
                bucket: "{{ minio_bucket }}"
                accessKeyIDSecretRef:
                  name: minio-credentials
                  key: username
                secretAccessKeySecretRef:
                  name: minio-credentials
                  key: password

    - name: "Wait for backup to complete: {{ backup_item.name }}"
      kubernetes.core.k8s:
        api_version: k8up.io/v1
        kind: Backup
        name: "{{ backup_item.name }}"
        namespace: "{{ k8up_default_namespace }}"
        wait: true
        wait_condition:
          type: Completed
          status: "True"
        wait_timeout: 10800  # 3h
      register: backup_status

    - name: Verify backup completion
      ansible.builtin.assert:
        that:
          - backup_status.result.status.finished | bool
          - backup_status.result.status.conditions | selectattr('type', 'equalto', 'Completed') | selectattr('status', 'equalto', 'True') | list | length > 0
        fail_msg: "Backup did not complete successfully"

    # - name: Get completion status
    #   ansible.builtin.set_fact:
    #     completion_info: "{{ backup_status.result.status.conditions | selectattr('type', 'equalto', 'Completed') | first }}"

    # - name: Display completion message
    #   ansible.builtin.debug:
    #     msg:
    #       - "Backup completion status: {{ completion_info.message }}"
    #       - "Backup completion time: {{ completion_info.lastTransitionTime }}"

  always:
    - name: Display log summary
      block:
        - name: Collect logs
          ansible.builtin.include_tasks: collect_logs.yml
          vars:
            collect_log_type: "backup"
            log_name: "{{ backup_item.name }}"
        - name: Display backup logs
          ansible.builtin.include_tasks: backup_logs.yml

    - name: Remove backup annotation from PVC
      when: backup_item.pvc_name is defined
      kubernetes.core.k8s:
        state: patched
        kind: PersistentVolumeClaim
        name: "{{ backup_item.pvc_name }}"
        namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              "k8up.io/backup": null

    - name: Remove backup annotations from PostgreSQL Pod
      when: backup_item.psql_pod is defined
      kubernetes.core.k8s:
        state: patched
        kind: Pod
        name: "{{ backup_item.psql_pod }}"
        namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
        definition:
          metadata:
            annotations:
              k8up.io/backupcommand: null
              k8up.io/file-extension: null

    - name: Remove Backup object
      kubernetes.core.k8s:
        state: absent
        api_version: k8up.io/v1
        kind: Backup
        name: "{{ backup_item.name }}"
        namespace: "{{ k8up_default_namespace }}"

    # #
    # # To use this, you need to improve the PodConfig below.
    # # Otherwise, tolerations or nodeSelectors are not applied correctly by k8up to its backup pod.
    # #
    # - name: Scale up Deployment
    #   kubernetes.core.k8s_scale:
    #     api_version: apps/v1
    #     kind: Deployment
    #     name: "{{ backup_item.deployment_name }}"
    #     namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
    #     replicas: 1
    #     wait: true
    #     wait_timeout: "{{ k8up_wait_timeout }}"
    #   when: backup_item.deployment_name is defined # and backup_item.psql_pod is defined

    # - name: Scale up StatefulSet
    #   kubernetes.core.k8s_scale:
    #     api_version: apps/v1
    #     kind: StatefulSet
    #     name: "{{ backup_item.statefulset_name }}"
    #     namespace: "{{ backup_item.namespace | default(k8up_default_namespace) }}"
    #     replicas: 1
    #     wait: true
    #     wait_timeout: "{{ k8up_wait_timeout }}"
    #   when: backup_item.statefulset_name is defined # and backup_item.psql_pod is defined
