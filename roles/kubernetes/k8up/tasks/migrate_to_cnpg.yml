# tasks/migrate_to_cnpg.yml
---
- name: Create temporary storage for Bitnami PostgreSQL
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "temp-postgres-storage"
        namespace: "{{ migration_namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: longhorn
        resources:
          requests:
            storage: "{{ temp_storage_size | default('10Gi') }}"

- name: Deploy temporary Bitnami PostgreSQL
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: temp-postgres
        namespace: "{{ migration_namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: temp-postgres
        template:
          metadata:
            labels:
              app: temp-postgres
          spec:
            containers:
              - name: postgresql
                image: docker.io/bitnami/postgresql:14.10.0
                env:
                  - name: POSTGRES_PASSWORD
                    value: "{{ temp_postgres_password }}"
                  - name: POSTGRES_DB
                    value: "{{ source_database_name }}"
                volumeMounts:
                  - name: data
                    mountPath: /bitnami/postgresql
                  - name: dump
                    mountPath: /dump
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: temp-postgres-storage
              - name: dump
                emptyDir: {}

- name: Wait for temporary PostgreSQL to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: StatefulSet
    name: temp-postgres
    namespace: "{{ migration_namespace }}"
  register: temp_postgres_status
  until: temp_postgres_status.resources[0].status.readyReplicas is defined and temp_postgres_status.resources[0].status.readyReplicas == 1
  retries: 30
  delay: 10

- name: Copy SQL dump to temporary pod
  kubernetes.core.k8s_exec:
    namespace: "{{ migration_namespace }}"
    pod: "temp-postgres-0"
    command: |
      kubectl cp {{ sql_dump_path }} {{ migration_namespace }}/temp-postgres-0:/dump/backup.sql

- name: Restore SQL dump to temporary PostgreSQL
  kubernetes.core.k8s_exec:
    namespace: "{{ migration_namespace }}"
    pod: "temp-postgres-0"
    command: |
      PGPASSWORD={{ temp_postgres_password }} psql -U postgres -d {{ source_database_name }} -f /dump/backup.sql

- name: Create CNPG import definition
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: postgresql.cnpg.io/v1
      kind: Cluster
      metadata:
        name: "{{ cnpg_cluster_name }}"
        namespace: "{{ migration_namespace }}"
      spec:
        instances: {{ cnpg_instances | default(3) }}
        bootstrap:
          initdb:
            import:
              type: microservice
              databases:
                - "{{ source_database_name }}"
              source:
                externalCluster: temp-postgres
        storage:
          size: "{{ cnpg_storage_size | default('10Gi') }}"
        externalClusters:
          - name: temp-postgres
            connectionParameters:
              host: temp-postgres
              user: postgres
              dbname: "{{ source_database_name }}"
            password:
              name: temp-postgres-credentials
              key: password

- name: Wait for CNPG import to complete
  kubernetes.core.k8s_info:
    api_version: postgresql.cnpg.io/v1
    kind: Cluster
    name: "{{ cnpg_cluster_name }}"
    namespace: "{{ migration_namespace }}"
  register: cnpg_status
  until: cnpg_status.resources[0].status.phase == "Running"
  retries: 60
  delay: 30

- name: Clean up temporary resources
  kubernetes.core.k8s:
    state: absent
    api_version: apps/v1
    kind: StatefulSet
    name: temp-postgres
    namespace: "{{ migration_namespace }}"

- name: Remove temporary PVC
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    name: temp-postgres-storage
    namespace: "{{ migration_namespace }}"
