# tasks/migrate_to_cnpg.yml
---
- name: Verify required variables are defined
  ansible.builtin.assert:
    that:
      - restore_item.namespace is defined
      - restore_item.snapshot_id is defined
      - restore_item.database_name is defined
      - restore_item.database_user is defined
      - restore_item.cnpg_cluster_name is defined
    fail_msg: "Missing required variables for database migration of {{ restore_item.name }}"

- name: Create temporary restore PVC
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "temp-restore-{{ restore_item.name }}"
        namespace: "{{ restore_item.namespace }}"
        labels:
          app: "temp-restore-{{ restore_item.name }}"
          created-by: ansible
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ restore_item.temp_storage_size | default('10Gi') }}"
        storageClassName: "{{ storage_class | default('longhorn') }}"

- name: Create K8up restore job
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: k8up.io/v1
      kind: Restore
      metadata:
        name: "{{ restore_item.name }}-psql"
        namespace: "{{ restore_item.namespace }}"
      spec:
        snapshot: "{{ restore_item.snapshot_id | default(omit) | string }}"
        podSecurityContext:
          runAsUser: "{{ restore_item.run_as_user | default(omit) | int }}"
          runAsGroup: "{{ restore_item.run_as_user | default(omit) | int }}"
          fsGroup: "{{ restore_item.run_as_user | default(omit) | int }}"
          fsGroupChangePolicy: OnRootMismatch
        backend:
          repoPasswordSecretRef:
            name: backup-repo
            key: password
          s3:
            endpoint: "{{ minio_endpoint }}"
            bucket: "{{ minio_bucket }}"
            accessKeyIDSecretRef:
              name: minio-credentials
              key: username
            secretAccessKeySecretRef:
              name: minio-credentials
              key: password
        restoreMethod:
          folder:
            claimName: "temp-restore-{{ restore_item.name }}"

- name: "Wait for restore to complete: {{ restore_item.name }}"
  kubernetes.core.k8s:
    api_version: k8up.io/v1
    kind: Restore
    name: "{{ restore_item.name }}-psql"
    namespace: "{{ restore_item.namespace }}"
    wait: true
    wait_condition:
      type: Completed
      status: "True"
    wait_timeout: 10800  # 3h
  register: restore_status

- name: Add Bitnami helm repository
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Get database password from existing secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: nextcloud-db-credentials
    namespace: "{{ restore_item.namespace }}"
  register: db_secret

- name: Set database password from secret
  ansible.builtin.set_fact:
    db_password: "{{ db_secret.resources[0].data.password | b64decode }}"

- name: Debug database password
  ansible.builtin.debug:
    msg: "{{ db_password }}"

- name: Create temp PostgreSQL values
  ansible.builtin.set_fact:
    temp_postgres_values:
      auth:
        username: "{{ restore_item.database_user }}"
        password: "{{ db_password }}"
        database: "{{ restore_item.database_name }}"
      primary:
        persistence:
          existingClaim: "temp-restore-{{ restore_item.name }}"
      architecture: standalone
      volumePermissions:
        enabled: true
      metrics:
        enabled: false
      commonLabels:
        app.kubernetes.io/component: temporary-database
        app.kubernetes.io/instance: "temp-postgres-{{ restore_item.name }}"

- name: Debug temp PostgreSQL values
  ansible.builtin.debug:
    msg: "{{ temp_postgres_values | to_yaml }}"

- name: Deploy temporary PostgreSQL with Helm
  kubernetes.core.helm:
    name: "temp-postgres-{{ restore_item.name }}"
    chart_ref: bitnami/postgresql
    chart_version: "15.5.38"  # Specify a stable version
    release_namespace: "{{ restore_item.namespace }}"
    create_namespace: true
    values: "{{ temp_postgres_values | from_yaml }}"
    wait: true
    wait_timeout: 5m

# - name: Wait for PostgreSQL pod to be ready
#   kubernetes.core.k8s_info:
#     api_version: v1
#     kind: Pod
#     namespace: "{{ restore_item.namespace }}"
#     label_selectors:
#       - app.kubernetes.io/instance=temp-postgres-{{ restore_item.name }}
#       - app.kubernetes.io/component=primary
#   register: postgres_pod
#   until:
#     - postgres_pod.resources | length > 0
#     - postgres_pod.resources[0].status.phase == "Running"
#     - postgres_pod.resources[0].status.containerStatuses[0].ready | bool
#   retries: 30
#   delay: 10

- name: Restore SQL dump to temporary PostgreSQL
  kubernetes.core.k8s_exec:
    namespace: "{{ restore_item.namespace }}"
    pod: "temp-postgres-{{ restore_item.name }}-postgresql-0"
    container: postgresql
    command: sh -c 'PGPASSWORD="{{ db_password }}" psql -U "{{ restore_item.database_user }}" -d "{{ restore_item.database_name }}" -f "/bitnami/postgresql/default-postgresql-{{ restore_item.name }}.sql"'
  register: restore_result
  failed_when: restore_result.rc != 0

- name: Create CNPG import definition
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: postgresql.cnpg.io/v1
      kind: Cluster
      metadata:
        name: "{{ restore_item.cnpg_cluster_name }}"
        namespace: "{{ restore_item.namespace }}"
      spec:
        instances: "{{ restore_item.cnpg_instances }}"
        storage:
          size: "{{ restore_item.cnpg_storage_size }}"
          storageClass: "{{ restore_item.storage_class }}"
        bootstrap:
          initdb:
            import:
              type: microservice
              databases:
                - "{{ restore_item.database_name }}"
              source:
                externalCluster: "temp-postgres-{{ restore_item.name }}"
        externalClusters:
          - name: "temp-postgres-{{ restore_item.name }}"
            connectionParameters:
              host: "temp-postgres-{{ restore_item.name }}-postgresql"
              user: "{{ restore_item.database_user }}"
              dbname: "{{ restore_item.database_name }}"
              sslmode: disable
            password:
              name: "nextcloud-db-credentials"
              key: password

# - name: Wait for CNPG import to complete
#   kubernetes.core.k8s_info:
#     api_version: postgresql.cnpg.io/v1
#     kind: Cluster
#     name: "{{ restore_item.cnpg_cluster_name }}"
#     namespace: "{{ restore_item.namespace }}"
#   register: cnpg_status
#   until:
#     - cnpg_status.resources[0].status is defined
#     - cnpg_status.resources[0].status.phase is defined
#     - cnpg_status.resources[0].status.phase == "Running"
#   retries: 60
#   delay: 30

# - name: Clean up temporary resources
#   kubernetes.core.k8s:
#     state: absent
#     kind: "{{ resource.kind }}"
#     api_version: "{{ resource.api_version }}"
#     name: "{{ resource.prefix }}-{{ restore_item.name }}{{ resource.suffix | default('') }}"
#     namespace: "{{ restore_item.namespace }}"
#   loop:
#     - { kind: 'StatefulSet', api_version: 'apps/v1', prefix: 'temp-postgres', suffix: '' }
#     - { kind: 'Service', api_version: 'v1', prefix: 'temp-postgres', suffix: '' }
#     - { kind: 'Secret', api_version: 'v1', prefix: 'temp-postgres', suffix: '' }
#     - { kind: 'PersistentVolumeClaim', api_version: 'v1', prefix: 'temp-restore', suffix: '' }
#     - { kind: 'Restore', api_version: 'k8up.io/v1', prefix: 'restore', suffix: "-{{ restore_item.snapshot_id }}" }
#   loop_control:
#     loop_var: resource
