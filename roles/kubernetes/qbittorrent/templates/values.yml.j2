---
image:
  repository: {{ qbittorrent_image_repository }}
  tag: {{ qbittorrent_image_tag }}
  pullPolicy: {{ qbittorrent_image_pull_policy }}

replicaCount: 1

service:
  type: {{ qbittorrent_service_type }}
  port: {{ qbittorrent_service_port }}

env:
  WEBUI_PORTS: "{{ qbittorrent_webui_ports }}"
  PUID: {{ qbittorrent_puid }}
  PGID: {{ qbittorrent_pgid }}
  UMASK: {{ qbittorrent_umask }}
  TZ: {{ qbittorrent_timezone }}
  VPN_CONF: {{ qbittorrent_vpn_conf }}
  VPN_LAN_NETWORK: {{ qbittorrent_vpn_lan_network }}
  VPN_LAN_LEAK_ENABLED: {{ qbittorrent_vpn_lan_leak_enabled | string | lower }}
  VPN_AUTO_PORT_FORWARD: {{ qbittorrent_vpn_auto_port_forward | string | lower }}
  VPN_KEEP_LOCAL_DNS: {{ qbittorrent_vpn_keep_local_dns | string | lower }}
  VPN_FIREWALL_TYPE: {{ qbittorrent_vpn_firewall_type }}
  VPN_HEALTHCHECK_ENABLED: {{ qbittorrent_vpn_healthcheck_enabled | string | lower }}
  PRIVOXY_ENABLED: {{ qbittorrent_privoxy_enabled | string | lower }}
  UNBOUND_ENABLED: {{ qbittorrent_unbound_enabled | string | lower }}
{% if qbittorrent_vpn_pia_username is defined %}
  VPN_PIA_USER: {{ qbittorrent_vpn_pia_username }}
{% endif %}
{% if qbittorrent_vpn_pia_password is defined %}
  VPN_PIA_PASS: {{ qbittorrent_vpn_pia_password }}
{% elif vault_qbittorrent_vpn_pia_password is defined %}
  VPN_PIA_PASS: {{ vault_qbittorrent_vpn_pia_password }}
{% endif %}
{% if qbittorrent_vpn_pia_preferred_region is defined %}
  VPN_PIA_PREFERRED_REGION: {{ qbittorrent_vpn_pia_preferred_region }}
{% endif %}
{% if qbittorrent_vpn_pia_dip_token is defined %}
  VPN_PIA_DIP_TOKEN: {{ qbittorrent_vpn_pia_dip_token }}
{% endif %}
{% if qbittorrent_vpn_pia_port_forward_persist is defined %}
  VPN_PIA_PORT_FORWARD_PERSIST: {{ qbittorrent_vpn_pia_port_forward_persist }}
{% endif %}
{% if qbittorrent_extra_env | length > 0 %}
{{ qbittorrent_extra_env | to_nice_yaml | indent(2) }}
{% endif %}

vpn:
  enabled: {{ qbittorrent_vpn_enabled }}
  provider: {{ qbittorrent_vpn_provider }}
  # secret for pia is not implemented
{% if qbittorrent_vpn_enabled %}
  config: |-
    # Auto-generated by Ansible
    {{ lookup('template', 'wg0.conf.j2') | indent(4) }}
{% endif %}

ingress:
  # Specify if an ingress resource for the pms server should be created or not
  enabled: {{ qbittorrent_ingress_enabled }}
{% if qbittorrent_ingress_enabled %}
  # The ingress class that should be used
  className: {{ qbittorrent_ingress_class_name }}

  hosts:
    - host: {{ qbittorrent_ingress_hostname }}
      paths:
        - path: /
          pathType: ImplementationSpecific
{% if qbittorrent_ingress_tls_enabled %}
  annotations:
    cert-manager.io/cluster-issuer: "{{ gitea_ingress_cert_issuer }}"
  tls:
    - secretName: {{ qbittorrent_ingress_tls_secret_name }}
      hosts:
        - {{ qbittorrent_ingress_hostname }}
{% else %}
  tls: []
{% endif %}
{% endif %}

persistence:
  config:
    enabled: {{ qbittorrent_config_persistence_enabled }}
{% if qbittorrent_config_persistence_enabled %}
{% if qbittorrent_config_storage_class is defined %}
    size: {{ qbittorrent_config_size }}
    accessMode: ReadWriteOnce
    storageClass: {{ qbittorrent_config_storage_class }}
{% elif qbittorrent_config_existing_claim is defined %}
    existingClaim: {{ qbittorrent_config_existing_claim }}
{% endif %}
{% endif %}

  data:
    enabled: {{ qbittorrent_data_persistence_enabled }}
{% if qbittorrent_data_persistence_enabled %}
{% if qbittorrent_data_storage_class is defined %}
    size: {{ qbittorrent_data_size }}
    accessMode: ReadWriteOnce
    storageClass: {{ qbittorrent_data_storage_class }}
{% elif qbittorrent_data_existing_claim != "" %}
    existingClaim: {{ qbittorrent_data_existing_claim }}
{% endif %}
{% endif %}

resources:
  limits:
    cpu: {{ qbittorrent_resources_limits_cpu }}
    memory: {{ qbittorrent_resources_limits_memory }}
  requests:
    cpu: {{ qbittorrent_resources_requests_cpu }}
    memory: {{ qbittorrent_resources_requests_memory }}
