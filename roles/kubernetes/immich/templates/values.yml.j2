## This chart relies on the common library chart from bjw-s
## You can find it at https://github.com/bjw-s/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: "immich-redis-master" # change if modifying the helm chart install
  DB_HOSTNAME: "immich-db-rw"
  DB_USERNAME: "immich"
  DB_DATABASE_NAME: "immich"
  DB_PASSWORD: "{{ vault_immich_db_password }}"
  IMMICH_MACHINE_LEARNING_URL: "http://immich-machine-learning:3003" # change if modifying the helm chart install
{% if immich_db_skip_migrations %}
  DB_SKIP_MIGRATIONS: true
{% endif %}
image:
  tag: {{ immich_image_tag }}

immich:
  metrics:
    # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
    enabled: false
  persistence:
    # Main data store for all photos shared between different components.
    library:
      # Automatically creating the library volume is not supported by this chart
      # You have to specify an existing PVC to use
      {% if immich_persistence_type == 'longhorn' -%}
      existingClaim: "immich-data-pvc"
      {% elif immich_persistence_type == 'pvc' -%}
      existingClaim: "{{ immich_persistence_pvc_existing_claim }}"
      {% endif %}
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  configuration: {}

{% if immich_persistence_external_enabled %}
persistence:
  external:
    enabled: true
    existingClaim: "{{ immich_persistence_external_existing_claim }}"
{% endif %}

# Dependencies

# DEPRECATED
# The postgres subchart is deprecated and will be removed in chart version 0.10.0
# See https://github.com/immich-app/immich-charts/issues/149 for more detail.
postgresql:
  enabled: {{ 'true' if immich_postgresql_source == 'internal' else 'false' }}
  image:
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.2.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: {{ vault_immich_db_password }}
  primary:
    containerSecurityContext:
      readOnlyRootFilesystem: false
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;

redis:
  enabled: {{ immich_redis_enabled }}
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      storageClass: {{ immich_redis_storage_class }}
    {% if immich_redis_affinity_enabled -%}
    # Add affinity rules for Redis to co-locate with Nextcloud
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: immich
            topologyKey: kubernetes.io/hostname
    {% endif %}

# Immich components

server:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent
  ingress:
    main:
      enabled: {{ immich_ingress_enabled }}
      ingressClassName: {{ immich_ingress_class_name }} # mandatory for ingress-nginx
      annotations:
        # proxy-body-size is set to 0 to remove the body limit on file uploads
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        cert-manager.io/cluster-issuer: {{ immich_ingress_cluster_issuer }}
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      hosts:
        - host: {{ immich_ingress_host }}
          paths:
            - path: "/"
      tls:
        - secretName: immich-tls
          hosts:
            - {{ immich_ingress_host }}

machine-learning:
  enabled: {{ immich_machine_learning_enabled }}
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: {{ immich_machine_learning_persistence_type }}
      accessMode: ReadWriteMany
      {% if immich_machine_learning_persistence_type != 'emptyDir' -%}
      storageClass: {{ immich_machine_learning_persistence_storage_class }}
      {% endif %}
  resources:
    limits:
      cpu: {{ immich_machine_learning_resources_limits_cpu }}

resources:
  limits:
    memory: {{ immich_resources_limits_memory }}
    cpu: {{ immich_resources_limits_cpu }}
  requests:
    memory: {{ immich_resources_requests_memory }}
    cpu: {{ immich_resources_requests_cpu }}
